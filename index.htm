<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Formulário de Solicitação de Baixa de Estoque</title>
    <style>
        body { font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif; background-color: #f4f7f9; margin: 0; padding: 20px; color: #333; }
        .container { max-width: 1000px; margin: 20px auto; padding: 30px; background-color: #ffffff; border-radius: 8px; box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1); }
        h1 { color: #1a2533; text-align: center; margin-bottom: 30px; font-size: 24px; }
        .form-grid { display: grid; grid-template-columns: 1fr 1fr 1fr; gap: 20px; margin-bottom: 20px; }
        .form-group { margin-bottom: 20px; }
        label { display: block; font-weight: 600; margin-bottom: 8px; color: #555; }
        input[type="date"], input[type="text"], input[type="file"], input[type="number"], select, textarea { width: 100%; padding: 12px; border: 1px solid #ccc; border-radius: 6px; box-sizing: border-box; transition: border-color 0.3s; } 
        input#valorProduto, input#valorTotalProduto { text-align: right; }
        input[readonly] { background-color: #e9ecef; cursor: not-allowed; }
        input:focus, select:focus, textarea:focus { border-color: #0078d4; outline: none; } 
        textarea { font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif; min-height: 80px; resize: vertical; } 
        .product-section { border: 1px solid #e0e0e0; padding: 20px; border-radius: 8px; background-color: #fcfcfc; margin-top: 25px; }
        .product-section h2 { display: flex; align-items: center; gap: 10px; }
        .product-inputs { display: grid; grid-template-columns: 1fr 3fr 0.8fr 1.2fr 1.2fr; gap: 15px; align-items: flex-end; }
        .add-button-container { text-align: center; margin-top: 20px; }
        .product-table { width: 100%; margin-top: 20px; border-collapse: collapse; }
        .product-table th, .product-table td { padding: 12px; text-align: left; border-bottom: 1px solid #ddd; }
        .product-table th { background-color: #f2f2f2; font-weight: 600; }
        .product-table tfoot td { font-weight: bold; font-size: 1.1em; background-color: #f9f9f9; border-top: 2px solid #ccc; }
        .product-table tfoot #total-geral-label { text-align: right; }
        .signature-pad-container { border: 1px dashed #ccc; border-radius: 6px; position: relative; }
        #signature-canvas { width: 100%; height: 180px; cursor: crosshair; }
        .button { padding: 12px 20px; border: none; border-radius: 6px; font-size: 16px; font-weight: 600; cursor: pointer; transition: background-color 0.3s, opacity 0.3s; white-space: nowrap; }
        .button-primary { background-color: #0078d4; color: white; width: 100%; margin-top: 10px; }
        .button-primary:hover { background-color: #005a9e; }
        .button:disabled { background-color: #a0a0a0; cursor: not-allowed; opacity: 0.7; }
        .button-secondary { background-color: #6c757d; color: white; }
        .button-danger { background-color: #dc3545; color: white; padding: 5px 10px; font-size: 14px; }
        .button-group { display: flex; gap: 10px; justify-content: flex-end; margin-top: 10px; }
        #confirmation-section { margin-top: 25px; border: 2px solid #0078d4; padding: 20px; border-radius: 8px; background-color: #f2f8fe; }
        #confirm-checkbox-group { display: flex; align-items: center; gap: 10px; }
        #confirm-checkbox { width: auto; }
        #status-message { margin-top: 20px; padding: 15px; border-radius: 6px; text-align: center; font-weight: 600; display: none; }
        .status-success { background-color: #d4edda; color: #155724; border: 1px solid #c3e6cb; }
        .status-error { background-color: #f8d7da; color: #721c24; border: 1px solid #f5c6cb; }
        .footer-info { text-align: right; font-size: 12px; color: #888; margin-top: 25px; border-top: 1px solid #eee; padding-top: 15px; }
    </style>
</head>
<body>
    <div class="container">
        <h1>Formulário de Solicitação de Baixa de Estoque</h1>
        <form id="baixa-form">
            <div class="form-group"> <label for="codigoRegistro">CÓDIGO DE REGISTRO</label> <input type="text" id="codigoRegistro" readonly> </div>
            <div class="form-grid"> <div class="form-group"><label for="dataSolicitacao">DATA</label><input type="date" id="dataSolicitacao" required></div> <div class="form-group"><label for="solicitante">SOLICITANTE</label><input type="text" id="solicitante" placeholder="Nome do solicitante" required></div> <div class="form-group"> <label for="unidade">UNIDADE</label> <select id="unidade" required> <option value="" disabled selected>Selecione...</option> <option value="ABC">ABC</option><option value="TCV">TCV</option><option value="TBE">TBE</option> <option value="TSJ">TSJ</option><option value="TCA">TCA</option><option value="API">API</option><option value="TPH">TPH</option> <option value="TBL">TBL</option><option value="TCG">TCG</option><option value="MCD">MCD</option><option value="TCB">TCB</option> </select> </div> </div>
            <div class="form-group"> <label for="motivo">MOTIVO</label> <select id="motivo" required> <option value="" disabled selected>Selecione...</option> <option value="Devolucoes">Devoluções</option> <option value="Avarias Externas">Avarias Externas (Freteiros)</option> <option value="Avaria Interna">Avaria Interna</option> <option value="Vencimento">Vencimento</option> <option value="Ajuste de Inventario">Ajuste de Inventário</option> </select> </div>
            
            <div class="form-group">
                <label for="justificativa">JUSTIFICATIVA (OBRIGATÓRIO)</label>
                <textarea id="justificativa" placeholder="Descreva detalhadamente o motivo da baixa. Por exemplo: produtos vencidos no estoque X, avaria causada por empilhadeira, etc." required></textarea>
            </div>

            <div class="form-group"> <label for="operacaoFiscalGeral">OPERAÇÃO FISCAL (Para todos os itens)</label> <select id="operacaoFiscalGeral" required> <option value="" disabled selected>Selecione...</option> <option value="599.96 - Saida P/Perda, Roubo, etc">599.96 - Saida P/Perda, Roubo, etc</option> <option value="599.83 - Saida por Perda/Avaria ">599.83 - Saida por Perda/Avaria</option> <option value="599.84 - Saida por Perda/Validade">599.84 - Saida por Perda/Validade</option> <option value="599.85 - Saida por Perda/Operacional">599.85 - Saida por Perda/Operacional</option> <option value="512.92 - Baixa p/Consumo">512.92 - Baixa p/Consumo</option> <option value="599.82 - Saida p/ Ajuste Inventário">599.82 - Saida por Ajuste Inventário</option> <option value="199.96 - Entrada p/ Ajuste Inventário">199.96 - Entrada p/ Ajuste Inventário</option> </select> </div>
            <div class="form-group"> <label for="anexoEvidencia">ANEXAR EVIDÊNCIA (Limite 4MB)</label> <input type="file" id="anexoEvidencia" accept="image/*,application/pdf" required> </div>
            <div class="form-group" id="notaFiscalGroup" style="display: none;"><label for="notaFiscal">Nº NOTA FISCAL</label><input type="text" id="notaFiscal" placeholder="Digite o número da NF"></div>
            
            <div class="product-section">
                <h2>ITENS PARA BAIXA</h2>
                <div class="product-inputs">
                    <div class="form-group"><label for="codigoProduto">Cód. Produto</label><input type="text" id="codigoProduto"></div>
                    <div class="form-group"><label for="descricaoProduto">Descrição</label><input type="text" id="descricaoProduto" maxlength="60"></div>
                    <div class="form-group"><label for="quantidadeProduto">Quant.</label><input type="number" id="quantidadeProduto" min="1" value="1"></div>
                    <div class="form-group"><label for="valorProduto">Valor Unit. (custo)</label><input type="text" id="valorProduto" placeholder="0,00"></div>
                    <div class="form-group"><label for="valorTotalProduto">Preço Total (R$)</label><input type="text" id="valorTotalProduto" placeholder="0,00" readonly></div>
                </div>
                <div class="add-button-container">
                    <button type="button" id="add-product-btn" class="button button-secondary">Adicionar Item à Lista</button>
                </div>
                <table class="product-table">
                    <thead>
                        <tr>
                            <th>Cód. Produto</th>
                            <th>Descrição</th>
                            <th>Quant.</th>
                            <th>Valor Unit. (R$)</th>
                            <th>Preço Total (R$)</th>
                            <th>Ação</th>
                        </tr>
                    </thead>
                    <tbody id="product-list"></tbody>
                    <tfoot id="product-list-footer">
                        <tr>
                            <td id="total-geral-label" colspan="4">Total Geral:</td>
                            <td id="total-geral-produtos">R$ 0,00</td>
                            <td></td>
                        </tr>
                    </tfoot>
                </table>
            </div>

            <button type="submit" id="submit-btn" class="button button-primary">Revisar para Enviar</button>
            
            <div id="confirmation-section" style="display: none;">
                <div class="form-group"> <label for="signature-canvas">ASSINATURA DO SOLICITANTE (OBRIGATÓRIO)</label> <div class="signature-pad-container"><canvas id="signature-canvas"></canvas></div> <div class="button-group"><button type="button" id="clear-signature-btn" class="button button-secondary">Limpar</button></div> </div>
                <div class="form-group" id="confirm-checkbox-group"> <input type="checkbox" id="confirm-checkbox"> <label for="confirm-checkbox" style="margin: 0;">Declaro que revisei todas as informações desta solicitação de baixa e confirmo sua veracidade.</label> </div>
                <button type="button" id="final-submit-btn" class="button button-primary" disabled>Confirmar e Enviar Solicitação</button>
            </div>
        </form>
        <div id="status-message"></div>
        <div class="footer-info"> LOG-GOR-008 | Rev01 | 20/10/2025 </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/signature_pad@4.0.0/dist/signature_pad.umd.min.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', () => {
            // Todos os seletores (sem alteração)
            const form = document.getElementById('baixa-form');
            const submitBtn = document.getElementById('submit-btn');
            const confirmationSection = document.getElementById('confirmation-section');
            const finalSubmitBtn = document.getElementById('final-submit-btn');
            const confirmCheckbox = document.getElementById('confirm-checkbox');
            const motivoSelect = document.getElementById('motivo');
            const notaFiscalGroup = document.getElementById('notaFiscalGroup');
            const notaFiscalInput = document.getElementById('notaFiscal');
            const addProductBtn = document.getElementById('add-product-btn');
            const productListTbody = document.getElementById('product-list');
            const statusMessageDiv = document.getElementById('status-message');
            const codigoRegistroInput = document.getElementById('codigoRegistro');
            const valorProdutoInput = document.getElementById('valorProduto');
            const canvas = document.getElementById('signature-canvas');
            const signaturePad = new SignaturePad(canvas, { backgroundColor: 'rgb(255, 255, 255)' });
            const operacaoFiscalSelect = document.getElementById('operacaoFiscalGeral');
            const originalOperacoesFiscais = operacaoFiscalSelect.innerHTML;
            const ajusteOptions = `
                <option value="" disabled selected>Selecione...</option>
                <option value="199.96 - Entrada p/ Ajuste Inventário">199.96 - Entrada p/ Ajuste Inventário</option>
                <option value="599.82 - Saida p/ Ajuste Inventário">599.82 - Saida por Ajuste Inventário</option>
            `;
            const quantidadeProdutoInput = document.getElementById('quantidadeProduto');
            const valorTotalProdutoInput = document.getElementById('valorTotalProduto');
            const totalGeralProdutosCell = document.getElementById('total-geral-produtos');

            // --- Funções de Cálculo (sem alteração) ---
            function parseCurrency(valorString) {
                if (!valorString) return 0;
                return parseFloat(
                    String(valorString)
                        .replace('R$ ', '')
                        .replace(/\./g, '')
                        .replace(',', '.')
                ) || 0;
            }
            function formatToBRL(value) {
                return new Intl.NumberFormat('pt-BR', {
                    style: 'currency',
                    currency: 'BRL'
                }).format(value);
            }
            function formatToNumericBRL(value) {
                 return new Intl.NumberFormat('pt-BR', {
                    minimumFractionDigits: 2,
                    maximumFractionDigits: 2
                }).format(value);
            }
            function calcularPrecoTotalInput() {
                const quantidade = parseFloat(quantidadeProdutoInput.value) || 0;
                const valorUnit = parseCurrency(valorProdutoInput.value);
                const total = quantidade * valorUnit;
                valorTotalProdutoInput.value = formatToNumericBRL(total);
            }
            function atualizarSomaTotal() {
                let somaGeral = 0;
                const todasAsLinhas = productListTbody.querySelectorAll('tr');
                todasAsLinhas.forEach(linha => {
                    const celulaTotal = linha.cells[4]; 
                    if (celulaTotal) {
                        somaGeral += parseCurrency(celulaTotal.innerText);
                    }
                });
                totalGeralProdutosCell.textContent = formatToBRL(somaGeral);
            }

            // --- Funções Originais (sem alteração) ---
            function generateUniqueShortCode() {
                const timeComponent = String(Date.now()).slice(-5);
                const randomComponent = String(Math.floor(Math.random() * 1000)).padStart(3, '0');
                return `REG-${timeComponent}-${randomComponent}`;
            }
            function setInitialCode() { codigoRegistroInput.value = generateUniqueShortCode(); }
            function resizeCanvas() {
                const ratio = Math.max(window.devicePixelRatio || 1, 1);
                canvas.width = canvas.offsetWidth * ratio;
                canvas.height = canvas.offsetHeight * ratio;
                canvas.getContext("2d").scale(ratio, ratio);
                signaturePad.clear();
            }
            function checkFinalReadiness() {
                const isSignatureEmpty = signaturePad.isEmpty();
                const isCheckboxChecked = confirmCheckbox.checked;
                finalSubmitBtn.disabled = isSignatureEmpty || !isCheckboxChecked;
            }
            const toBase64 = file => new Promise((resolve, reject) => {
                const reader = new FileReader();
                reader.readAsDataURL(file);
                reader.onload = () => resolve(reader.result);
                reader.onerror = error => reject(error);
            });
            function formatCurrency(input) {
                let value = input.value.replace(/\D/g, '');
                if (value === '') { input.value = ''; return; }
                const numberValue = parseFloat(value) / 100;
                input.value = formatToNumericBRL(numberValue);
            }

            // --- INICIALIZAÇÃO E LISTENERS (sem alteração) ---
            setInitialCode();
            window.addEventListener('resize', resizeCanvas);
            calcularPrecoTotalInput();
            atualizarSomaTotal();
            valorProdutoInput.addEventListener('input', () => {
                formatCurrency(valorProdutoInput);
                calcularPrecoTotalInput();
            });
            quantidadeProdutoInput.addEventListener('input', calcularPrecoTotalInput);
            motivoSelect.addEventListener('change', () => {
                const showNotaFiscal = ['Devolucoes', 'Avarias Externas'].includes(motivoSelect.value);
                notaFiscalGroup.style.display = showNotaFiscal ? 'block' : 'none';
                notaFiscalInput.required = showNotaFiscal;
                if (!showNotaFiscal) notaFiscalInput.value = '';
                if (motivoSelect.value === 'Ajuste de Inventario') {
                    operacaoFiscalSelect.innerHTML = ajusteOptions;
                    operacaoFiscalSelect.required = true; 
                 } else {
                    operacaoFiscalSelect.innerHTML = originalOperacoesFiscais;
                    operacaoFiscalSelect.required = true; 
                 }
            });
            document.getElementById('clear-signature-btn').addEventListener('click', () => {
                signaturePad.clear();
                checkFinalReadiness();
            });
            addProductBtn.addEventListener('click', () => {
                const inputs = {
                    codigo: document.getElementById('codigoProduto'),
                    descricao: document.getElementById('descricaoProduto'),
                    quantidade: document.getElementById('quantidadeProduto'),
                    valor: document.getElementById('valorProduto'),
                    valorTotal: document.getElementById('valorTotalProduto')
                };
                if (!inputs.codigo.value.trim() || !inputs.descricao.value.trim() || !inputs.quantidade.value.trim() || !inputs.valor.value.trim()) {
                    alert('Por favor, preencha todos os campos do item (Cód, Descrição, Quant. e Valor Unit.).'); return;
                }
                if (parseFloat(inputs.quantidade.value) <= 0) { 
                     alert('A quantidade deve ser maior que zero.'); return; 
                 }
                const valorUnitFormatado = inputs.valor.value;
                const valorTotalFormatado = inputs.valorTotal.value;
                const newRow = document.createElement('tr');
                newRow.innerHTML = `
                    <td>${inputs.codigo.value}</td>
                    <td>${inputs.descricao.value}</td>
                    <td>${inputs.quantidade.value}</td>
                    <td>R$ ${valorUnitFormatado}</td>
                    <td>R$ ${valorTotalFormatado}</td>
                    <td><button type="button" class="button button-danger remove-product-btn">Remover</button></td>
                `;
                productListTbody.appendChild(newRow);
                inputs.codigo.value = '';
                inputs.descricao.value = '';
                inputs.quantidade.value = '1';
                inputs.valor.value = '';
                inputs.valorTotal.value = '0,00';
                atualizarSomaTotal();
            });
            productListTbody.addEventListener('click', (event) => {
                if (event.target.classList.contains('remove-product-btn')) { 
                     event.target.closest('tr').remove(); 
                     atualizarSomaTotal();
                }
            });

            // --- LISTENER DO SUBMIT INICIAL (sem alteração) ---
            form.addEventListener('submit', (event) => {
                event.preventDefault();
                const anexoInput = document.getElementById('anexoEvidencia');
                
                if (anexoInput.files.length === 0) {
                    alert('É OBRIGATÓRIO anexar uma evidência (NF, Relatório, etc.).');
                    anexoInput.focus(); 
                     return; 
                 }

                const file = anexoInput.files[0];
                const MAX_FILE_SIZE = 4 * 1024 * 1024; // 4MB
                if (file.size > MAX_FILE_SIZE) {
                    alert('O arquivo de evidência é muito grande. O limite máximo é de 4MB.');
                    anexoInput.value = ''; 
                    anexoInput.focus();
                    return;
                }

                if (productListTbody.rows.length === 0) {
                    alert('Adicione pelo menos um item para baixa.'); return;
                }

                submitBtn.style.display = 'none';
                confirmationSection.style.display = 'block';
                resizeCanvas();
                confirmationSection.scrollIntoView({ behavior: 'smooth' });
            });


            signaturePad.addEventListener("endStroke", checkFinalReadiness);
            confirmCheckbox.addEventListener('change', checkFinalReadiness);
            
            // ==================================================================
            // === ENVIO FINAL (AQUI ESTÁ A CORREÇÃO DA URL) ===
            // ==================================================================
            finalSubmitBtn.addEventListener('click', async () => {
                finalSubmitBtn.disabled = true;
                finalSubmitBtn.textContent = 'Enviando...';
                showStatusMessage('', ''); 

                const anexoInput = document.getElementById('anexoEvidencia');
                let anexoBase64 = null;
                let anexoNome = null;

                if (anexoInput.files.length > 0) {
                    anexoBase64 = await toBase64(anexoInput.files[0]);
                    anexoNome = anexoInput.files[0].name;
                } else {
                    alert('Ocorreu um erro. Por favor, anexe a evidência novamente.');
                    confirmationSection.style.display = 'none';
                    submitBtn.style.display = 'block';
                    finalSubmitBtn.disabled = false;
                    finalSubmitBtn.textContent = 'Confirmar e Enviar Solicitação';
                    return;
                }

                
                let somaRecalculada = 0; 
                
                const produtos = Array.from(productListTbody.rows).map(row => {
                    const valorUnitarioString = row.cells[3].innerText; 
                    const valorTotalString = row.cells[4].innerText;   
                    
                    somaRecalculada += parseCurrency(valorTotalString);

                    return {
                        codigo: row.cells[0].innerText,
                        descricao: row.cells[1].innerText,
                        quantidade: parseInt(row.cells[2].innerText),
                        valor: parseCurrency(valorUnitarioString) 
                    };
                });
                
                const somaTotalGeral = somaRecalculada; 


                // O objeto formData agora está 100% alinhado com o JSON
                const formData = {
                    codigoRegistro: codigoRegistroInput.value,
                    dataSolicitacao: document.getElementById('dataSolicitacao').value,
                    solicitante: document.getElementById('solicitante').value,
                    unidade: document.getElementById('unidade').value,
                    motivo: document.getElementById('motivo').value,
                    justificativa: document.getElementById('justificativa').value, 
                    operacaoFiscal: document.getElementById('operacaoFiscalGeral').value,
                    notaFiscal: document.getElementById('notaFiscal').value,
                    produtos: produtos, 
                    somaTotalGeral: somaTotalGeral, 
                    assinaturaBase64: signaturePad.toDataURL('image/png'),
                    anexo: {
                        nomeArquivo: anexoNome,
                        conteudoBase64: anexoBase64
                    }
                };
                
                // ================== INÍCIO DA CORREÇÃO ==================
                // Removido o "g" extra de "httpsg://"
                const powerAutomateUrl = 'https://defaultaf73075ee5864d09b8b3d44b758089.52.environment.api.powerplatform.com:443/powerautomate/automations/direct/workflows/63717d9cc7d3450faf2111398ab71cd3/triggers/manual/paths/invoke?api-version=1&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=3g6ACT7sgX-s0kU_db9lnRIYQN-c0iCpsN9bEkzS3fs'; 
                // =================== FIM DA CORREÇÃO ====================

                 try {
                    const response = await fetch(powerAutomateUrl, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify(formData),
                    });
                    
                    if (!response.ok) {
                        let errorBody = await response.text();
                        try {
                           errorBody = JSON.stringify(JSON.parse(errorBody), null, 2);
                        } catch(e) {
                           // usa o texto puro
                        }
                        console.error('Resposta do Servidor (Erro):', errorBody);
                        throw new Error(`Erro do servidor: ${response.status}. Resposta: ${errorBody}`); 
                    }
                    
                    showStatusMessage('Solicitação de baixa enviada com sucesso!', 'success');
                    form.reset();
                    motivoSelect.dispatchEvent(new Event('change'));
                    signaturePad.clear();
                    productListTbody.innerHTML = '';
                    atualizarSomaTotal(); // Limpa o total
                    confirmationSection.style.display = 'none';
                    submitBtn.style.display = 'block';
                    confirmCheckbox.checked = false;
                    setInitialCode();

                } catch (error) {
                    console.error('Erro ao enviar solicitação:', error);
                    showStatusMessage('Falha ao enviar a solicitação. Verifique o console (F12) para mais detalhes.', 'error');
                } finally {
                    finalSubmitBtn.disabled = false;
                    finalSubmitBtn.textContent = 'Confirmar e Enviar Solicitação';
                }
            });
            
            // Função de Status (sem alteração)
            function showStatusMessage(message, type) {
                statusMessageDiv.textContent = message;
                statusMessageDiv.className = `status-${type}`;
                statusMessageDiv.style.display = message ? 'block' : 'none';
            }
        });
    </script>
</body>
</html>
